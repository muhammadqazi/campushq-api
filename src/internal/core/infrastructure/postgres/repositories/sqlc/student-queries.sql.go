// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: student-queries.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLastInsertedStudentId = `-- name: GetLastInsertedStudentId :one
SELECT student_id FROM students ORDER BY student_id DESC LIMIT 1
`

func (q *Queries) GetLastInsertedStudentId(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getLastInsertedStudentId)
	var student_id int32
	err := row.Scan(&student_id)
	return student_id, err
}

const insertStudent = `-- name: InsertStudent :one
INSERT INTO students (
    student_id,
    first_name,
    surname,
    sex,
    role,
    status,
    access_status,
    acceptance_type,
    semester,
    department_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
) RETURNING student_id
`

type InsertStudentParams struct {
	StudentID      int32       `json:"student_id"`
	FirstName      string      `json:"first_name"`
	Surname        string      `json:"surname"`
	Sex            string      `json:"sex"`
	Role           string      `json:"role"`
	Status         string      `json:"status"`
	AccessStatus   string      `json:"access_status"`
	AcceptanceType string      `json:"acceptance_type"`
	Semester       string      `json:"semester"`
	DepartmentID   pgtype.Int4 `json:"department_id"`
}

func (q *Queries) InsertStudent(ctx context.Context, arg InsertStudentParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertStudent,
		arg.StudentID,
		arg.FirstName,
		arg.Surname,
		arg.Sex,
		arg.Role,
		arg.Status,
		arg.AccessStatus,
		arg.AcceptanceType,
		arg.Semester,
		arg.DepartmentID,
	)
	var student_id int32
	err := row.Scan(&student_id)
	return student_id, err
}
